import unittest

import numpy as np
import pandas as pd
import torch
from ridley.document_embeddings import score
from transformers import RealmEmbedder, RealmScorer, RealmTokenizer


class TestDocumentEmbeddings(unittest.TestCase):
    def setUp(self):
        self.scorer = RealmScorer.from_pretrained(
            "google/realm-cc-news-pretrained-scorer", num_candidates=2
        )
        self.embedder = RealmEmbedder.from_pretrained(
            "google/realm-cc-news-pretrained-embedder"
        )
        self.tokenizer = RealmTokenizer.from_pretrained(
            "google/realm-cc-news-pretrained-embedder"
        )
        self.input_texts = ["How are you?", "What is the item in the picture?"]
        self.candidate_texts = [
            ["Hello world!", "Nice to meet you!"],
            ["A cute cat.", "An adorable dog"],
        ]

        riddles = pd.read_csv("data/kaggle_riddles/riddles.csv")
        riddles_list = list(riddles.QUESTIONS + " Answer: " + riddles.ANSWERS)
        if len(riddles_list) % 2 != 0:
            riddles_list = riddles_list[:-1]
        batched_riddles = np.array_split(riddles_list, len(riddles_list) // 2)
        self.batched_riddles = [list(x) for x in batched_riddles]
        self.input_riddle = """
            Thirty white horses on a red hill, first they champ, then they stamp, then they 
            stand still
            """

    def test_tokenize(self):
        result = self.tokenizer(
            self.input_texts, return_tensors="pt", padding="longest"
        )
        self.assertIsNotNone(result)

    def test_score(self):
        score(self.scorer, self.tokenizer, self.input_texts, self.candidate_texts)

    def test_score_riddle(self):
        score(self.scorer, self.tokenizer, self.input_riddle, self.batched_riddles)

    def test_typicality(self):
        pass

    def test_batch_riddle_candidates(self):
        pass


if __name__ == "__main__":
    unittest.main()
